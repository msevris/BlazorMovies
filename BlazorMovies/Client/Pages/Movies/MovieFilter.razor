@page "/movies/search"
@inject IMoviesRepository moviesRepository
@inject IGenreRepository genreRepository
@inject NavigationManager navigationManager

<h3>Search Movies</h3>

<EditForm Model="_filterMoviesDTO">
    <div class="form-inline">
        <div class="form-group mb-2">
            <label for="title" class="sr-only">Title</label>
            <input type="text" class="form-control" id="title" placeholder="Movie Title"
                   @bind-value="_filterMoviesDTO.Title" @bind-value:event="oninput"
                   @onkeypress="@((KeyboardEventArgs e) => TitleKeyPress(e))" />
        </div>
        <div class="form-group mx-sm-3 mb-2">
            <select class="form-control" @bind="_filterMoviesDTO.GenreId">
                <option value="0">--Select a Genre</option>
                @foreach (var genre in Genres)
                {
                    <option value="@genre.Id">@genre.Name</option>
                }
            </select>
        </div>
        <div class="form-group mx-sm-3 mb-2">
            <input type="checkbox" class="form-check-input" id="upcomingReleases" @bind="_filterMoviesDTO.UpcomingReleases" />
            <label class="form-check-label" for="upcomingReleases">
                Upcoming Releases
            </label>
        </div>
        <div class="form-group mx-sm-3 mb-2">
            <input type="checkbox" class="form-check-input" id="inTheaters" @bind="_filterMoviesDTO.InTheaters" />
            <label class="form-check-label" for="inTheaters">
                In Theaters
            </label>
        </div>


        <button type="button" class="btn btn-primary mb-2 mx-sm-3" @onclick="SearchForMovies">Filter</button>
        <button type="button" class="btn btn-outline-danger mb-2" @onclick="Clear">Clear</button>
    </div>
</EditForm>

<MoviesList Movies="Movies" />
<Pagination CurrentPage="_filterMoviesDTO.Page" TotalAmountPages="totalAmountPages" SelectedPage="SelectedPage" />

@code {

    private FilterMoviesDTO _filterMoviesDTO = new FilterMoviesDTO();
    private List<Genre> Genres = new List<Genre>();
    private List<Movie> Movies;
    private int totalAmountPages;

    protected override async Task OnInitializedAsync()
    {
        var queryStrings = navigationManager.GetQueryStrings(navigationManager.Uri);
        Genres = await genreRepository.GetGenres();
        if (queryStrings != null)
        {
            FillFilterWithQueryStrings(queryStrings);
        }
        await LoadMovies();
    }

    private void FillFilterWithQueryStrings(Dictionary<string, string> queryStrings)
    {
        if (queryStrings.ContainsKey("genreId"))
        {
            _filterMoviesDTO.GenreId = int.Parse(queryStrings["genreId"]);
        }

        if (queryStrings.ContainsKey("title"))
        {
            _filterMoviesDTO.Title = queryStrings["title"];
        }

        if (queryStrings.ContainsKey("intheaters"))
        {
            _filterMoviesDTO.UpcomingReleases = bool.Parse(queryStrings["intheaters"]);
        }

        if (queryStrings.ContainsKey("upcomingReleases"))
        {
            _filterMoviesDTO.UpcomingReleases = bool.Parse(queryStrings["upcomingReleases"]);
        }

        if (queryStrings.ContainsKey("page"))
        {
            _filterMoviesDTO.Page = int.Parse(queryStrings["page"]);
        }
    }

    private async Task SelectedPage(int page)
    {
        _filterMoviesDTO.Page = page;
        await LoadMovies();
    }

    private async Task LoadMovies()
    {
        var queryString = GenerateQueryString();
        if (!string.IsNullOrWhiteSpace(queryString))
        {
            queryString = $"?{queryString}";
            navigationManager.NavigateTo("movies/search" + queryString);
        }
        var paginatedResponse = await moviesRepository.GetMoviesFiltered(_filterMoviesDTO);
        Movies = paginatedResponse.Response;
        totalAmountPages = paginatedResponse.TotalAmountPages;
    }

    private string GenerateQueryString()
    {
        var queryStringsDict = new Dictionary<string, string>();
        queryStringsDict["genreId"] = _filterMoviesDTO.GenreId.ToString();
        queryStringsDict["title"] = _filterMoviesDTO.Title ?? "";
        queryStringsDict["intheaters"] = _filterMoviesDTO.InTheaters.ToString();
        queryStringsDict["upcomingReleases"] = _filterMoviesDTO.UpcomingReleases.ToString();
        queryStringsDict["page"] = _filterMoviesDTO.Page.ToString();

        var defaultValue = new List<string>() { "false", "", "0" };

        return string.Join("&", queryStringsDict
            .Where(x => !defaultValue.Contains(x.Value.ToLower()))
            .Select(x => $"{x.Key}={System.Web.HttpUtility.UrlEncode(x.Value)}").ToArray());
    }

    private async Task SearchForMovies()
    {
        await LoadMovies();
    }

    private async Task Clear()
    {
        _filterMoviesDTO.Title = "";
        _filterMoviesDTO.GenreId = 0;
        _filterMoviesDTO.UpcomingReleases = false;
        _filterMoviesDTO.InTheaters = false;
        await LoadMovies();
    }

    private async Task TitleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SearchForMovies();
        }
    }
}

